PARSER_BEGIN(CMinus)

public class CMinus{
    public static void main(String args[]) throws ParseException{
        CMinus parser = new CMinus(System.in);
        parser.Start();
    }
}


PARSER_END(CMinus)

SKIP: { <"/*"> : InsideText }

<InsideText> SKIP :{ "*/" : DEFAULT }

<InsideText> MORE :{ <~[]> {}}

//Keywords
TOKEN : {
            <Keywords : ("else" | "if" | "int" | "return" | "void" | "while" | "real" | "input" | "output")>{
            
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
        }

//Symbols
TOKEN : {
            <Plus : "+">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"más\" (" + image + ") encontrado");
            }
            |
            <Minus : "-">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menos\" (" + image + ") encontrado");
            }
            |
            <Multiplier : "*">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"por\" (" + image + ") encontrado");
            }
            |
            <Slash : "/">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"diagonal\" (" + image + ") encontrado");
            }
            |
            <OpenLeftAngularBracket : "<">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menor que\" (" + image + ") encontrado");
            }
            |
            <OpenRightAngularBracket : ">">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"mayor que\" (" + image + ") encontrado");
            }
            |
            <Equal : "=">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"asignación\" (" + image + ") encontrado");
            }
            |
            <LeftAngularEqual : <OpenLeftAngularBracket><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menor o igual que\" (" + image + ") encontrado");
            }
            |
            <RightAngularEqual : <OpenRightAngularBracket><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"mayor o igual que\" (" + image + ") encontrado");
            }
            |
            <EqualEqual : <Equal><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"igual que\" (" + image + ") encontrado");
            }
            |
            <Different : ["!"]<Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"diferente de\" (" + image + ") encontrado");
            }
            |
            <Semicolon : ";">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"fin de instrucción\" (" + image + ") encontrado");
            }
            |
            <Comma : ",">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"coma\" (" + image + ") encontrado");
            }
            |
            <LeftParen : "(">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"paréntesis de apertura\" (" + image + ") encontrado");
            }
            |
            <RightParen : ")">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"paréntesis de cierre\" (" + image + ") encontrado");
            }
            |
            <LeftSquareBracket : "[">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"corchete de apertura\" (" + image + ") encontrado");
            }
            |
            <RightSquareBracket : "]">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"corchete de cierre\" (" + image + ") encontrado");
            }
            |
            <LeftBrace : "{">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"llave de apertura\" (" + image + ") encontrado");
            }
            |
            <RightBrace : "}">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"llave de cierre\" (" + image + ") encontrado");
            }
        }

//Others
TOKEN : {
            <Id : ["a"-"z", "A"-"Z"]((["a"-"z", "A"-"Z", "0"-"9"])*)>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Identificador \"" + image + "\" encontrado");
            }
            |
            <Number : (["0"-"9"])+>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Número \"" + image + "\" encontrado");
            }
            |
            <Decimal : ((["0"-"9"])+ "." (["0"-"9"])+)>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal \"" + image + "\" encontrado");
            }
        }

//White spaces
SKIP : {" " | "\t" | "\n" | "\r"}

//Errors
SPECIAL_TOKEN : {
           <BadId : (["0"-"9"])+(["a"-"z", "A"-"Z"])+>
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Indentificador mal construido \"" +
                        image + "\" encontrado");
           }
           |
           <BadFloat1 : "." (["0"-"9"])+>
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal mal construido \"" +
                        image + "\" encontrado");
           }
           |
           <BadFloat2 : (["0"-"9"])+ ".">
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal mal construido \"" +
                        image + "\" encontrado");
           }
        }

//All other chars
SPECIAL_TOKEN : {
            <Error : ~[]>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo no válido \"" + image + "\" encontrado");
            }
        }

void Start() : {}
{
    (
    <Keywords>

    | <Plus> | <Minus> | <Multiplier> | <Slash>
    | <OpenLeftAngularBracket> | <OpenRightAngularBracket> | <Equal>
    | <LeftAngularEqual> | <RightAngularEqual> | <EqualEqual> | <Different>
    | <Semicolon> | <Comma> | <LeftParen> | <RightParen> | <LeftSquareBracket>
    | <RightSquareBracket> | <LeftBrace> | <RightBrace>

    |<Id> | <Number> | <Decimal>

    )+<EOF>
}
