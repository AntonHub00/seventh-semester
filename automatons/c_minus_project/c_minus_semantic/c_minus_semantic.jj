PARSER_BEGIN(CMinus)

import java.util.Hashtable;
import java.util.Enumeration;

public class CMinus{

    static Hashtable <String, Id>symbols_table = new Hashtable();

    public static void main(String args[]) throws ParseException{
        CMinus parser = new CMinus(System.in);
        parser.Start();
    }
}


PARSER_END(CMinus)

SKIP: { <"/*"> : InsideText }

<InsideText> SKIP :{ "*/" : DEFAULT }

<InsideText> MORE :{ <~[]> {}}

SKIP: { <"//"> : AnotherInsideText }

<AnotherInsideText> SKIP :{ "\n" : DEFAULT }

<AnotherInsideText> MORE :{ <~[]> {}}

//Keywords
TOKEN : {
            <Else : "else">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <If : "if">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <Int : "int">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <Return : "return">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <Void : "void">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <While : "while">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
            |
            <Real : "real">{
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Palabra reservada \"" + image + "\" encontrada");
            }
        }

//Symbols
TOKEN : {
            <Plus : "+">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"más\" (" + image + ") encontrado");
            }
            |
            <Minus : "-">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menos\" (" + image + ") encontrado");
            }
            |
            <Multiplier : "*">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"por\" (" + image + ") encontrado");
            }
            |
            <Slash : "/">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"diagonal\" (" + image + ") encontrado");
            }
            |
            <LeftAngularBracket : "<">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menor que\" (" + image + ") encontrado");
            }
            |
            <RightAngularBracket : ">">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"mayor que\" (" + image + ") encontrado");
            }
            |
            <Equal : "=">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"asignación\" (" + image + ") encontrado");
            }
            |
            <LeftAngularEqual : <LeftAngularBracket><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"menor o igual que\" (" + image + ") encontrado");
            }
            |
            <RightAngularEqual : <RightAngularBracket><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"mayor o igual que\" (" + image + ") encontrado");
            }
            |
            <EqualEqual : <Equal><Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"igual que\" (" + image + ") encontrado");
            }
            |
            <BangEqual : ["!"]<Equal>>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"diferente de\" (" + image + ") encontrado");
            }
            |
            <Semicolon : ";">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"fin de instrucción\" (" + image + ") encontrado");
            }
            |
            <Comma : ",">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"coma\" (" + image + ") encontrado");
            }
            |
            <LeftParen : "(">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"paréntesis de apertura\" (" + image + ") encontrado");
            }
            |
            <RightParen : ")">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"paréntesis de cierre\" (" + image + ") encontrado");
            }
            |
            <LeftSquareBracket : "[">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"corchete de apertura\" (" + image + ") encontrado");
            }
            |
            <RightSquareBracket : "]">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"corchete de cierre\" (" + image + ") encontrado");
            }
            |
            <LeftBrace : "{">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"llave de apertura\" (" + image + ") encontrado");
            }
            |
            <RightBrace : "}">
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo \"llave de cierre\" (" + image + ") encontrado");
            }
        }

//Others
TOKEN : {
            <Id : ["a"-"z", "A"-"Z"]((["a"-"z", "A"-"Z", "0"-"9"])*)>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Identificador \"" + image + "\" encontrado");
            }
            |
            <Number : (["0"-"9"])+>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Número \"" + image + "\" encontrado");
            }
            |
            <Decimal : ((["0"-"9"])+ "." (["0"-"9"])+)>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal \"" + image + "\" encontrado");
            }
        }

//White spaces
SKIP : {" " | "\t" | "\n" | "\r"}

//Errors
SPECIAL_TOKEN : {
           <BadId : (["0"-"9"])+(["a"-"z", "A"-"Z"])+>
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Indentificador mal construido \"" +
                        image + "\" encontrado");
           }
           |
           <BadFloat1 : "." (["0"-"9"])+>
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal mal construido \"" +
                        image + "\" encontrado");
           }
           |
           <BadFloat2 : (["0"-"9"])+ ".">
           {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Decimal mal construido \"" +
                        image + "\" encontrado");
           }
        }

//All other chars
SPECIAL_TOKEN : {
            <Error : ~[]>
            {
                System.out.println(matchedToken.beginLine + "," +
                        matchedToken.beginColumn + ": Símbolo no válido \"" + image + "\" encontrado");
            }
        }

void Start() : {}
{

    (program())+ <EOF> {
        System.out.println("\n####Finished####\n");

        System.out.println("Symbols table:\n");

        Enumeration symbols_table_keys = symbols_table.keys();

        System.out.format("%20s%20s%20s%20s\n\n", "Name", "Type", "Category", "Size");

        while(symbols_table_keys.hasMoreElements()) {
            String key = (String) symbols_table_keys.nextElement();
            System.out.println(symbols_table.get(key));
        }
    }
}

// Emulates epsilon
void empty() : {}
{
    {return;}
}

void program() : {}
{
    declaration_list()
}

void declaration_list() : {}
{
    declaration() declaration_list_prime()
}

void declaration_list_prime() : {}
{
    declaration() declaration_list_prime() | empty()
}

void declaration() : {}
{
    LOOKAHEAD(3)
    var_declaration() | func_declaration()
}

String type_specifier() : {}
{
    <Int> {return "int";} | <Void> {return "void";} | <Real> {return "real";}
}

void var_declaration() : {String lexem, type; String[] category_and_size=new String[2];}
{
    type=type_specifier() <Id>
    {
        lexem = token.image.toString();
        if(symbols_table.containsKey(lexem)) System.out.println(getToken(0).beginLine +
        "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
        "\" ya se encuentra en la tabla de símbolos");
        else symbols_table.put(lexem, new Id(lexem, type, "", 0));
    }
    category_and_size=var_declaration_prime()
    {
        symbols_table.get(lexem).category=category_and_size[0];
        symbols_table.get(lexem).size=Integer.parseInt(category_and_size[1]);
    }
}

String[] var_declaration_prime() : {String category_and_size[]=new String[2];}
{
    //Index 0 = category, Index 1 = size
    <LeftSquareBracket> <Number>
    {
        category_and_size[1] = token.image.toString();
    }
    <RightSquareBracket> <Semicolon>
    {
        category_and_size[0]= "array";
        return category_and_size;
    }
    | empty() <Semicolon>
    {
        category_and_size[0]="variable";
        category_and_size[1]="0";
        return category_and_size;
    }
}

void func_declaration() : {String lexem, type, category; int size;}
{
    type=type_specifier() <Id>
    {
        lexem = token.image.toString();

        if(symbols_table.containsKey(lexem)) System.out.println(getToken(0).beginLine +
        "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
        "\" ya se encuentra en la tabla de símbolos");
        else symbols_table.put(lexem, new Id(lexem, type, "", 0));
    }
    <LeftParen> size=params()
    {
        symbols_table.get(lexem).size=size;
    }
    <RightParen> compound_stmt(lexem)
    {
        symbols_table.get(lexem).category="function";
    }
}

int params() : {int counter;}
{
    LOOKAHEAD(2)
    counter=param_list() {return counter;}| <Void> {return 0;}
}

int param_list() : {int counter;}
{
    param() counter=param_list_prime() {return counter+1;}
}

int param_list_prime() : {int counter;}
{
    <Comma> param() counter=param_list_prime() {return counter+1;} | empty() {return 0;}
}

void param() : {String lexem, type, category;}
{
    type=type_specifier() <Id>
    {
        lexem = token.image.toString();
        if(symbols_table.containsKey(lexem)) System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
            "\" ya se encuentra en la tabla de símbolos");
        else symbols_table.put(lexem, new Id(lexem, type, "", 0));
    }
    category=param_prime() {symbols_table.get(lexem).category=category;}
}

String param_prime() : {}
{
    <LeftSquareBracket> <RightSquareBracket> {return "array";} | empty() {return "variable";}
}

void compound_stmt(String param_id) : {}
{
    <LeftBrace> local_declarations() statement_list(param_id) <RightBrace>
}

void local_declarations() : {}
{
    var_declaration() local_declarations() | empty()
}

void statement_list(String param_id) : {}
{
    statement(param_id) statement_list(param_id) | empty()
}

void statement(String param_id) : {}
{
    expression_stmt() | compound_stmt(param_id) | selection_stmt(param_id) | iteration_stmt(param_id) | return_stmt(param_id)
}

void expression_stmt() : {}
{
    expression(null) <Semicolon> | <Semicolon>
}

void selection_stmt(String param_id) : {}
{
    <If> <LeftParen> expression(null) <RightParen> statement(param_id) (<Else> statement(param_id) | empty())
}

void iteration_stmt(String param_id) : {}
{
    <While> <LeftParen> expression(null) <RightParen> statement(param_id)
}

void return_stmt(String param_id) : {}
{
    <Return> (<Semicolon>
    {
        String param_type = symbols_table.get(param_id).type;
        String this_type = "void";

        if(param_type != this_type)
            System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. \"" + param_id +
            "\" has a different type. Given type: " + this_type + " Expected type: "+
            param_type);
    }
    | expression(param_id) <Semicolon>)
}

String expression(String param_id) : {String var_id, lexem;}
{
    LOOKAHEAD(5)  var_id=var(null)

    {
        if(param_id != null){
            String param_type = symbols_table.get(param_id).type;
            String this_type = symbols_table.get(var_id).type;

            if(this_type != this_type){
                System.out.println(getToken(0).beginLine +
                "," + getToken(0).beginColumn + ": ERROR. \"" + var_id +
                "\" has a different type. Given type: " + this_type + " Expected type: "+
                param_type);
            }
        }
    }

    <Equal> lexem=expression(var_id) {return lexem;}
    | lexem=simple_expression(param_id) {return lexem;}
}

String var(String param_id) : {String lexem, array_index;}
{
    <Id>
    {
        lexem = token.image.toString();

        if(!symbols_table.containsKey(lexem)){
            System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
            "\" you need to declare a variable before use it");
        }else{
            if(param_id != null){
                String param_type = symbols_table.get(param_id).type;
                String this_type = symbols_table.get(lexem).type;

                if(param_type != this_type){
                    System.out.println(getToken(0).beginLine +
                    "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
                    "\" has a different type. Given type: " + this_type + " Expected type: "+
                    param_type);
                }
            }
        }
    }

    // //Modified temporarily ("exprenssion()" must be inside brackets instead "Number" to match the original grammar)
    // (<LeftSquareBracket> <Number>
    // {
    //     int array_index = Integer.parseInt(token.image.toString());
    //     int array_size = symbols_table.get(lexem).size;

    //     if(array_index < 0 | array_index >= array_size){
    //         System.out.println(getToken(0).beginLine +
    //         "," + getToken(0).beginColumn + ": ERROR. Index out of bounds. "+
    //         "Index must be between 0-" + (array_size-1));
    //     }
    // }
    // <RightSquareBracket> | empty())

    (<LeftSquareBracket> array_index=expression(param_id)
    {
        if(array_index==null){
            System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. Can not determine if array" +
            " index is valid");
        }
        else{
            int array_index_value = Integer.parseInt(array_index);
            int array_size = symbols_table.get(lexem).size;

            if(array_index_value < 0 | array_index_value >= array_size){
                System.out.println(getToken(0).beginLine +
                "," + getToken(0).beginColumn + ": ERROR. Index out of bounds." +
                " Array index must be between 0-" + (array_size-1));
            }
        }
    }
    <RightSquareBracket> | empty())
    {return lexem;}
}

String simple_expression(String param_id) : {String lexem;}
{
    lexem=additive_expression(param_id) (relation_operator() additive_expression(param_id) {return null;}
    | empty() {return lexem;})
}

void relation_operator() : {}
{
    <LeftAngularEqual>
    | <RightAngularEqual>
    | <LeftAngularBracket>
    | <RightAngularBracket>
    | <EqualEqual>
    | <BangEqual>
}

String additive_expression(String param_id) : {String lexem, other_additive_ex;}
{
    lexem=term(param_id) other_additive_ex=additive_expression_prime(param_id)
    {return (other_additive_ex==null)?null:lexem;}
}

String additive_expression_prime(String param_id) : {}
{
    (<Plus> | <Minus>) term(param_id) additive_expression_prime(param_id) {return null;}
    | empty() {return "empty";}
}

String term(String param_id) : {String lexem, other_term;}
{
    lexem=factor(param_id) other_term=term_prime(param_id)
    {return (other_term==null)?null:lexem;}
}

String term_prime(String param_id) : {}
{
    (<Multiplier> | <Slash>) factor(param_id) term_prime(param_id) {return null;}
    | empty() {return "empty";}
}

String factor(String param_id) : {}
{
    <LeftParen> expression(param_id) <RightParen> {return null;}
    | LOOKAHEAD(2) call(param_id) {return null;}
    |  LOOKAHEAD(2) var(param_id) {return null;}
    | <Number>
    {
        if(param_id != null){
            String param_type = symbols_table.get(param_id).type;
            String this_type = "int";

            if(param_type != this_type)
                System.out.println(getToken(0).beginLine +
                "," + getToken(0).beginColumn + ": ERROR. " +
                token.image.toString() +
                " has a different type. Given type: " + this_type + " Expected type: "+
                param_type);
        }
        return token.image.toString();
    }
    | <Decimal>
    {
        if(param_id != null){
            String param_type = symbols_table.get(param_id).type;
            String this_type = "real";

            if(param_type != this_type)
                System.out.println(getToken(0).beginLine +
                "," + getToken(0).beginColumn + ": ERROR. " +
                token.image.toString() +
                " has a different type. Given type: " + this_type + " Expected type: "+
                param_type);
        }
        return null;
    }
}

void call(String param_id) : {String lexem; int counter;}
{
    <Id>

    {
        lexem = token.image.toString();

        if(!symbols_table.containsKey(lexem)){
            System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
            "\" you need to declare a function before use it");
        }else{
            if(param_id != null){
                String param_type = symbols_table.get(param_id).type;
                String this_type = symbols_table.get(lexem).type;

                if(param_type != this_type){
                    System.out.println(getToken(0).beginLine +
                    "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
                    "\" has a different type. Given type: " + this_type +
                    " Expected type: "+ param_type);
                }
            }
        }
    }

    <LeftParen> counter=args()
    {
        int this_size = symbols_table.get(lexem).size;

        if(counter != this_size)
            System.out.println(getToken(0).beginLine +
            "," + getToken(0).beginColumn + ": ERROR. \"" + lexem +
            "\" has incorrect amount of arguments. Given arguments: " + counter +
            " Expected arguments: "+ this_size);
    }
    <RightParen>
}

int args() : {int counter;}
{
    counter=arg_list() {return counter;} | empty() {return 0;}
}

int arg_list() : {int counter;}
{
    expression(null) counter=arg_list_prime() {return counter+1;}
}

int arg_list_prime() : {int counter;}
{
    <Comma> expression(null) counter=arg_list_prime() {return counter+1;} | empty() {return 0;}
}