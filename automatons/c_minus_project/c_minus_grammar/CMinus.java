/* CMinus.java */
/* Generated By:JavaCC: Do not edit this line. CMinus.java */
import java.util.List;
import java.util.ArrayList;

public class CMinus implements CMinusConstants {

    static List<String> my_ids = new ArrayList<String>();

    public static void main(String args[]) throws ParseException{
        CMinus parser = new CMinus(System.in);
        parser.Start();
    }

  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      program();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Int:
      case Void:
      case Real:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
System.out.println("\u005cn####Finished####\u005cn");
        System.out.println("Ids: " + my_ids.toString());
  }

// Emulates epsilon
  static final public void empty() throws ParseException {
{if ("" != null) return;}
  }

  static final public void program() throws ParseException {
    declaration_list();
  }

  static final public void declaration_list() throws ParseException {
    declaration();
    declaration_list_prime();
  }

  static final public void declaration_list_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Int:
    case Void:
    case Real:{
      declaration();
      declaration_list_prime();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      empty();
    }
  }

  static final public void declaration() throws ParseException {
    if (jj_2_1(3)) {
      var_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Int:
      case Void:
      case Real:{
        func_declaration();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Int:{
      jj_consume_token(Int);
      break;
      }
    case Void:{
      jj_consume_token(Void);
      break;
      }
    case Real:{
      jj_consume_token(Real);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(Id);
if(!(my_ids.contains(token.image.toString()))){
            my_ids.add(token.image.toString());
        }
    var_declaration_prime();
  }

  static final public void var_declaration_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftSquareBracket:{
      jj_consume_token(LeftSquareBracket);
      jj_consume_token(Number);
      jj_consume_token(RightSquareBracket);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      empty();
    }
    jj_consume_token(Semicolon);
  }

  static final public void func_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(Id);
if(!(my_ids.contains(token.image.toString()))){
            my_ids.add(token.image.toString());
        }
    jj_consume_token(LeftParen);
    params();
    jj_consume_token(RightParen);
    compound_stmt();
  }

  static final public void params() throws ParseException {
    if (jj_2_2(2)) {
      param_list();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Void:{
        jj_consume_token(Void);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void param_list() throws ParseException {
    param();
    param_list_prime();
  }

  static final public void param_list_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Comma:{
      jj_consume_token(Comma);
      param();
      param_list_prime();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      empty();
    }
  }

  static final public void param() throws ParseException {
    type_specifier();
    jj_consume_token(Id);
if(!(my_ids.contains(token.image.toString()))){
            my_ids.add(token.image.toString());
        }
    param_prime();
  }

  static final public void param_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftSquareBracket:{
      jj_consume_token(LeftSquareBracket);
      jj_consume_token(RightSquareBracket);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      empty();
    }
  }

  static final public void compound_stmt() throws ParseException {
    jj_consume_token(LeftBrace);
    local_declarations();
    statement_list();
    jj_consume_token(RightBrace);
  }

  static final public void local_declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Int:
    case Void:
    case Real:{
      var_declaration();
      local_declarations();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      empty();
    }
  }

  static final public void statement_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case If:
    case Return:
    case While:
    case Semicolon:
    case LeftParen:
    case LeftBrace:
    case Id:
    case Number:
    case Decimal:{
      statement();
      statement_list();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      empty();
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Semicolon:
    case LeftParen:
    case Id:
    case Number:
    case Decimal:{
      expression_stmt();
      break;
      }
    case LeftBrace:{
      compound_stmt();
      break;
      }
    case If:{
      selection_stmt();
      break;
      }
    case While:{
      iteration_stmt();
      break;
      }
    case Return:{
      return_stmt();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression_stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftParen:
    case Id:
    case Number:
    case Decimal:{
      expression();
      jj_consume_token(Semicolon);
      break;
      }
    case Semicolon:{
      jj_consume_token(Semicolon);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selection_stmt() throws ParseException {
    jj_consume_token(If);
    jj_consume_token(LeftParen);
    expression();
    jj_consume_token(RightParen);
    statement();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Else:{
      jj_consume_token(Else);
      statement();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      empty();
    }
  }

  static final public void iteration_stmt() throws ParseException {
    jj_consume_token(While);
    jj_consume_token(LeftParen);
    expression();
    jj_consume_token(RightParen);
    statement();
  }

  static final public void return_stmt() throws ParseException {
    jj_consume_token(Return);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Semicolon:{
      jj_consume_token(Semicolon);
      break;
      }
    case LeftParen:
    case Id:
    case Number:
    case Decimal:{
      expression();
      jj_consume_token(Semicolon);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    if (jj_2_3(5)) {
      var();
      jj_consume_token(Equal);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LeftParen:
      case Id:
      case Number:
      case Decimal:{
        simple_expression();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void var() throws ParseException {
    jj_consume_token(Id);
if(!(my_ids.contains(token.image.toString()))){
            my_ids.add(token.image.toString());
        }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftSquareBracket:{
      jj_consume_token(LeftSquareBracket);
      expression();
      jj_consume_token(RightSquareBracket);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      empty();
    }
  }

  static final public void simple_expression() throws ParseException {
    additive_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftAngularBracket:
    case RightAngularBracket:
    case LeftAngularEqual:
    case RightAngularEqual:
    case EqualEqual:
    case BangEqual:{
      relation_operator();
      additive_expression();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      empty();
    }
  }

  static final public void relation_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftAngularEqual:{
      jj_consume_token(LeftAngularEqual);
      break;
      }
    case RightAngularEqual:{
      jj_consume_token(RightAngularEqual);
      break;
      }
    case LeftAngularBracket:{
      jj_consume_token(LeftAngularBracket);
      break;
      }
    case RightAngularBracket:{
      jj_consume_token(RightAngularBracket);
      break;
      }
    case EqualEqual:{
      jj_consume_token(EqualEqual);
      break;
      }
    case BangEqual:{
      jj_consume_token(BangEqual);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void additive_expression() throws ParseException {
    term();
    additive_expression_prime();
  }

  static final public void additive_expression_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Plus:
    case Minus:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Plus:{
        jj_consume_token(Plus);
        break;
        }
      case Minus:{
        jj_consume_token(Minus);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
      additive_expression_prime();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      empty();
    }
  }

  static final public void term() throws ParseException {
    factor();
    term_prime();
  }

  static final public void term_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Multiplier:
    case Slash:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Multiplier:{
        jj_consume_token(Multiplier);
        break;
        }
      case Slash:{
        jj_consume_token(Slash);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      factor();
      term_prime();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      empty();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftParen:{
      jj_consume_token(LeftParen);
      expression();
      jj_consume_token(RightParen);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_4(2)) {
        call();
      } else if (jj_2_5(2)) {
        var();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Number:{
          jj_consume_token(Number);
          break;
          }
        case Decimal:{
          jj_consume_token(Decimal);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void call() throws ParseException {
    jj_consume_token(Id);
if(!(my_ids.contains(token.image.toString()))){
            my_ids.add(token.image.toString());
        }
    jj_consume_token(LeftParen);
    args();
    jj_consume_token(RightParen);
  }

  static final public void args() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LeftParen:
    case Id:
    case Number:
    case Decimal:{
      arg_list();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      empty();
    }
  }

  static final public void arg_list() throws ParseException {
    expression();
    arg_list_prime();
  }

  static final public void arg_list_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Comma:{
      jj_consume_token(Comma);
      expression();
      arg_list_prime();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      empty();
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_33()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(LeftParen)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(LeftParen)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(RightParen)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_3R_7()) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(LeftSquareBracket)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(RightSquareBracket)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(LeftSquareBracket)) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    if (jj_scan_token(Semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    if (jj_scan_token(Id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_4()) return true;
    if (jj_scan_token(Equal)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_2()
 {
    if (jj_3R_7()) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMinusTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2a00,0x2a00,0x2a00,0x2a00,0x20000000,0x800,0x4000000,0x20000000,0x2a00,0x8a001500,0x8a001500,0xa000000,0x80,0xa000000,0x8000000,0x20000000,0x1ec0000,0x1ec0000,0xc000,0xc000,0x30000,0x30000,0x8000000,0x0,0x8000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0xe,0xe,0x0,0xe,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xe,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMinus(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMinus(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMinusTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMinus(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMinusTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMinus(CMinusTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMinusTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
