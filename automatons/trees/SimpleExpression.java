/* SimpleExpression.java */
/* Generated By:JavaCC: Do not edit this line. SimpleExpression.java */
    import java.util.ArrayList;
    import java.util.Stack;
    import java.util.HashMap;

    public class SimpleExpression implements SimpleExpressionConstants {

        static ArrayList<String> postfixList = new ArrayList<String>();
        static Stack<String> operatorsStack = new Stack<String>();
        static HashMap<String, Integer> operatorsValues = new HashMap<String, Integer>();

        static void initializeOperatorsValues(){
            operatorsValues.put("+", 0);
            operatorsValues.put("-", 0);
            operatorsValues.put("*", 1);
            operatorsValues.put("/", 1);
        }

        static void flushStack(){
            while(!operatorsStack.isEmpty()){
                postfixList.add(operatorsStack.pop());
            };
        }

        /* This method just considers operators. Operands are inserted directly in */
        /* the semantic section */
        static void shuntingYard(String operator){
            System.out.println(postfixList);
            System.out.println(operatorsStack);
            System.out.println();

            if(operator == ")"){
                String stackTopOperator;
                do{
                    stackTopOperator = operatorsStack.pop();
                    if(stackTopOperator != "("){
                        postfixList.add(stackTopOperator);
                    }
                }while(stackTopOperator != "(");
            }
            else if(
                    operator == "(" ||
                    operatorsStack.isEmpty() ||
                    operatorsStack.peek() == "("
                   ){
                /* if the "operator" is "(" then push it onto the stack */
                operatorsStack.push(operator);
            }else if(
                    operatorsValues.get(operator) >
                    operatorsValues.get(operatorsStack.peek())){
                operatorsStack.push(operator);
            }else{
                int currentOperatorValue = operatorsValues.get(operator);
                int stackTopOperatorValue = operatorsValues.get(operatorsStack.peek());

                while(
                        currentOperatorValue < stackTopOperatorValue ||
                        currentOperatorValue == stackTopOperatorValue
                     ){

                    postfixList.add(operatorsStack.pop());

                    if(operatorsStack.isEmpty() || operatorsStack.peek() == "("){
                        break;
                    }

                    stackTopOperatorValue = operatorsValues.get(operatorsStack.peek());
                };

                operatorsStack.push(operator);
            }
        }

        public static void main(String[] args) throws ParseException {
            SimpleExpression analisis = new SimpleExpression(System.in);
            initializeOperatorsValues();
            analisis.start();
        }

  static final public void start() throws ParseException {
    expression();
    jj_consume_token(0);
flushStack();
        System.out.println();
        System.out.println("postfix list: " + postfixList);
  }

  static final public void expression() throws ParseException {
    term();
    expression_prime();
  }

  static final public void expression_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case addOperator:
    case subOperator:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case addOperator:{
        jj_consume_token(addOperator);
shuntingYard(token.image.toString());
        break;
        }
      case subOperator:{
        jj_consume_token(subOperator);
shuntingYard(token.image.toString());
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
      expression_prime();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      empty();
    }
  }

  static final public void term() throws ParseException {
    factor();
    term_prime();
  }

  static final public void term_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mulOperator:
    case divOperator:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mulOperator:{
        jj_consume_token(mulOperator);
shuntingYard(token.image.toString());
        break;
        }
      case divOperator:{
        jj_consume_token(divOperator);
shuntingYard(token.image.toString());
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      factor();
      term_prime();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      empty();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case constant:{
      jj_consume_token(constant);
postfixList.add(token.image.toString());
      break;
      }
    case variable:{
      jj_consume_token(variable);
postfixList.add(token.image.toString());
      break;
      }
    case leftParen:{
      jj_consume_token(leftParen);
shuntingYard(token.image.toString());
      expression();
      jj_consume_token(rightParen);
shuntingYard(token.image.toString());
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Emulates epsilon
  static final public void empty() throws ParseException {
{if ("" != null) return;}
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleExpressionTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180,0x180,0x600,0x600,0x860,};
   }

  /** Constructor with InputStream. */
  public SimpleExpression(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleExpression(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleExpression(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleExpression(SimpleExpressionTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
