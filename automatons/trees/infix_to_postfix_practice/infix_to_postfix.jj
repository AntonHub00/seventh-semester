PARSER_BEGIN(SimpleExpression)

    import java.util.Hashtable;
    import java.util.Enumeration;

    public class SimpleExpression{

        static Hashtable <String, Id>symbols_table = new Hashtable();

        public static void main(String[] args) throws ParseException {
            SimpleExpression analisis = new SimpleExpression(System.in);

            System.out.println();
            System.out.println("## Simple expression analizer ##");
            System.out.println();

            System.out.println();
            System.out.println("(Variable definition just work with integers)");
            System.out.println();

            analisis.start();
        }
    }

PARSER_END(SimpleExpression)

    SKIP: { " " | "\t" | "\n" | "\r"}

TOKEN:
{
    /* Operands */
    <id: (["a"-"z", "A"-"Z"])+>
        |
        <constant: (["0"-"9"])+>
        |

        /* Operators */
        <addOperator: "+">
        |
        <subOperator: "-">
        |
        <mulOperator: "*">
        |
        <divOperator: "/">
        |
        <leftParen: "(">
        |
        <rightParen: ")">
        |

        /* declaration and assignment of variables */
        <equals: "=">
        |
        <semicolon: ";">
}

void start() : {} {
    var_declaration() "##" expression() <EOF>
    {

        System.out.println();
        System.out.println("\n####Finished####\n");
        System.out.println();
        System.out.println("-------------------------------------");
        System.out.println("Symbols table:\n");

        Enumeration symbols_table_keys = symbols_table.keys();

        System.out.format("%20s%20s%20s%20s%20s\n\n", "Name", "Type", "Category", "Size", "Value");

        while(symbols_table_keys.hasMoreElements()) {
            String key = (String) symbols_table_keys.nextElement();
            System.out.println(symbols_table.get(key));
        }

        System.out.println("-------------------------------------");
        System.out.println();

        Postfix.flushStack();

        System.out.println();
        System.out.println("-------------------------------------");
        System.out.println("postfix list: " + Postfix.getPostfixList());
        System.out.println("-------------------------------------");
        System.out.println();

        System.out.println();
        System.out.println("-------------------------------------");
        System.out.println("Intermediate code:\n");
        Postfix.generateIntermediateCode();
        System.out.println("-------------------------------------");
        System.out.println();

        /* float postfixEvaluation = Postfix.evaluatePostfix(symbols_table); */

        /* System.out.println("postfix evaluation: " + postfixEvaluation); */
    }
}

/* Start of semantic section of variable definition------------------------- */
void var_declaration(): {String lexem, type = "int", value;}
{
    <id> {lexem = token.image.toString();}
    <equals> <constant>
    {
        value = token.image.toString();
        symbols_table.put(lexem, new Id(lexem, type, "variable", 0, value));
    }
    <semicolon> var_declaration_prime()
}

void var_declaration_prime(): {String lexem, type = "int", value;}
{
    <id> {lexem = token.image.toString();}
    <equals> <constant>
    {
        value = token.image.toString();
        symbols_table.put(lexem, new Id(lexem, type, "variable", 0, value));
    }
    <semicolon> var_declaration_prime()
    | empty()
}
/* End of semantic section of variable definition--------------------------- */

/* Start of semantic section of expressions--------------------------------- */
void expression(): {} {
    term() expression_prime()
}

void expression_prime(): {} {
    (<addOperator> {Postfix.shuntingYard(token.image.toString());}
     |
     <subOperator> {Postfix.shuntingYard(token.image.toString());}
    )
        term() expression_prime() | empty()
}

void term(): {} {
    factor() term_prime()
}

void term_prime(): {} {
    (<mulOperator> {Postfix.shuntingYard(token.image.toString());}
     |
     <divOperator> {Postfix.shuntingYard(token.image.toString());}
    )
        factor() term_prime() | empty()
}

void factor(): {} {
    <constant> {Postfix.shuntingYard(token.image.toString());}
    |
        <id> {Postfix.shuntingYard(token.image.toString());}
    |
        <leftParen> {Postfix.shuntingYard(token.image.toString());}
    expression()
        <rightParen> {Postfix.shuntingYard(token.image.toString());}
}
/* End of semantic section of expressions----------------------------------- */

/* Start of emulates epsilon------------------------------------------------ */
void empty(): {}
{
    {return;}
}
/* End of emulates epsilon-------------------------------------------------- */
