PARSER_BEGIN(SimpleExpression)

    import java.util.Hashtable;
    import java.util.Enumeration;

    public class SimpleExpression{

        static Hashtable <String, Id>symbols_table = new Hashtable();

        public static void main(String[] args) throws ParseException {
            SimpleExpression analisis = new SimpleExpression(System.in);

            System.out.println();
            System.out.println("## Simple expression analizer ##");
            System.out.println();

            System.out.println();
            System.out.println("(Variable definition just work with integers)");
            System.out.println();

            analisis.start();
        }
    }

PARSER_END(SimpleExpression)

    SKIP: { " " | "\t" | "\n" | "\r"}

TOKEN:
{
    /* Conditional tokens */
    <If: "if">
        |
        <Else: "else">
        |
        <leftBrace: "{">
        |
        <rightBrace: "}">
        |

        /* Operands */
        <Id: (["a"-"z", "A"-"Z"])+>
        |
        <Constant: (["0"-"9"])+>
        |

        /* Operators */
        <AddOperator: "+">
        |
        <SubOperator: "-">
        |
        <MulOperator: "*">
        |
        <DivOperator: "/">
        |
        <LeftParen: "(">
        |
        <RightParen: ")">
        |

        /* Relational operators */
        <LessThan: "<">
        |
        <GreaterThan: ">">
        |
        <LessEqualThan: "<=">
        |
        <GreaterEqualThan: ">=">
        |
        <EqualEqual: "==">
        |
        <Different: "!=">
        |

        /* Other */
        <Equal: "=">
        |
        <Semicolon: ";">
}

void start() : {} {
    (if_statement() | expression())+ <EOF>

    {

        System.out.println();
        System.out.println("\n####Finished####\n");
        System.out.println();

        System.out.println();
        System.out.println("-------------------------------------");
        System.out.println("Intermediate code:\n");
        Postfix.printCuadruples();
        System.out.println("-------------------------------------");
        System.out.println();
    }
}


/* Start of semantic section of conditional definition------------------------- */
void if_statement(): {} {
    <If> expression() {Postfix.addJumpCuadruple(false);}
    <leftBrace>
        (expression())+
        <rightBrace>
        (<Else> <leftBrace>
         {Postfix.addJumpCuadruple(true);}
         {Postfix.setJumpCuadruple();}
         (expression())+
         {Postfix.setJumpCuadruple();}
         <rightBrace> | {Postfix.setJumpCuadruple();} empty())
}
/* End of semantic section of conditional definition------------------------- */


/* Start of semantic section of expressions--------------------------------- */
void expression() : {} {
    (LOOKAHEAD(2)
    <Id> {Postfix.shuntingYard(token.image.toString());}
    <Equal> {Postfix.shuntingYard(token.image.toString());}
    simple_expression() | simple_expression())
    {Postfix.evaluateCurrentExpression();}
}

void simple_expression() : {} {
    additive_expression() (relational_operator()
    additive_expression() | empty())
}

void relational_operator() : {} {
    <LessThan> {Postfix.shuntingYard(token.image.toString());}
        | <GreaterThan> {Postfix.shuntingYard(token.image.toString());}
        | <LessEqualThan> {Postfix.shuntingYard(token.image.toString());}
        | <GreaterEqualThan> {Postfix.shuntingYard(token.image.toString());}
        | <EqualEqual> {Postfix.shuntingYard(token.image.toString());}
        | <Different> {Postfix.shuntingYard(token.image.toString());}
}

void additive_expression() : {} {
    term() additive_expression_prime()
}

void additive_expression_prime() : {} {
    (
     <AddOperator> {Postfix.shuntingYard(token.image.toString());}
     |
     <SubOperator> {Postfix.shuntingYard(token.image.toString());}
    ) term() additive_expression_prime() | empty()
}

void term() : {} {
    factor() term_prime()
}

void term_prime() : {} {
    (
     <MulOperator> {Postfix.shuntingYard(token.image.toString());}
     |
     <DivOperator> {Postfix.shuntingYard(token.image.toString());}
    ) factor() term_prime() | empty()
}

void factor() : {} {
    <Id> {Postfix.shuntingYard(token.image.toString());}
    |
        <Constant> {Postfix.shuntingYard(token.image.toString());}
    |
        <LeftParen> {Postfix.shuntingYard(token.image.toString());}
    simple_expression()
        <RightParen> {Postfix.shuntingYard(token.image.toString());}
}
/* End of semantic section of expressions----------------------------------- */


/* Start of emulates epsilon------------------------------------------------ */
void empty(): {}
{
    {return;}
}
/* End of emulates epsilon-------------------------------------------------- */
